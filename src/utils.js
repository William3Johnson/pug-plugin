// the 'enhanced-resolve' package already used in webpack, don't need to define it in package.json
const ResolverFactory = require('enhanced-resolve');
const path = require('path');
const { resolveException } = require('./exceptions');

/**
 * @param {string} path The start path to resolve.
 * @param {{}} options The enhanced-resolve options.
 * @returns {function(context:string, request:string): string | false}
 */
const getFileResolverSync = (path, options) => {
  const resolve = ResolverFactory.create.sync({
    ...options,
    aliasFields: [],
    conditionNames: [],
    descriptionFiles: [],
    exportsFields: [],
    mainFields: [],
    modules: [],
    mainFiles: [],
    extensions: [],
    preferRelative: true,
  });

  return (context, request) => {
    if (!request) request = context;
    else path = context;
    return resolve(path, request);
  };
};

let resolveFile = null;

const isFunction = (value) => typeof value === 'function';

/**
 * Converts the win path to POSIX standard.
 * The require() function understands only POSIX format.
 *
 * Fix path, for example:
 *   - `..\\some\\path\\file.js` to `../some/path/file.js`
 *   - `C:\\some\\path\\file.js` to `C:/some/path/file.js`
 *
 * @param {string} value The path on Windows.
 * @return {*}
 */
const pathToPosix = (value) => value.replace(/\\/g, '/');

const resource = {
  webpackOptionsResolve: {},

  /**
   * @type {string} The context directory to require the file.
   */
  context: '',

  /**
   * @type {string} The the output public path is `webpack.options.output.publicPath`.
   */
  publicPath: '',

  /**
   * @type {{key: string}} The key is source file, the value is generated asset file.
   */
  files: {},

  init: (rootContext, resolveOptions) => {
    resolveFile = getFileResolverSync(rootContext, resolveOptions);
  },

  /**
   * Get the key of asset for get/set it into/from cache.
   *
   * @note Very important to normalize the file.
   *   The file can contain `path/to/../to/file` that is not equal to `path/to/file` for same file.
   *
   * @param {string} context
   * @param {string} file
   * @returns {symbol}
   */
  getKey: (context, file) => Symbol.for(context + '__' + path.join(file)),

  /**
   * Require the resource file from source in pug template.
   *
   * @param {string} file The required file from source directory.
   * @returns {string} The output asset filename generated by filename template.
   * @throws {Error}
   */
  require: (file) => {
    const self = resource;
    const context = self.context;
    const assetId = self.getKey(context, file);
    const assetFile = self.files[assetId];

    // bypass the inline data-url, e.g.: data:image/png;base64
    if (file.startsWith('data:')) return file;

    if (assetFile) {
      // resolve web path of processed asset filename
      return path.posix.join(self.publicPath, assetFile);
    } else if (/\.js[a-z0-9]*$/i.test(file)) {
      // require only js code or json data
      const fullPath = require.resolve(file, { paths: [context] });
      return require(fullPath);
    }

    // fallback for `compile` method to try to resolve alias from resolve.plugins
    try {
      const resolvedFile = resolveFile(context, file);
      const assetId = self.getKey(context, resolvedFile);
      const assetFile = self.files[assetId];

      if (assetFile) {
        // resolve web path of processed asset filename
        return path.posix.join(self.publicPath, assetFile);
      }
    } catch (error) {
      resolveException(file);
    }

    resolveException(file);
  },
};

/**
 * Simple equal of two objects.
 *
 * @param {{}} obj1
 * @param {{}} obj2
 * @return {boolean}
 */
const shallowEqual = function (obj1, obj2) {
  const keys1 = Object.keys(obj1);
  const keys2 = Object.keys(obj2);

  if (keys1.length !== keys2.length) return false;

  for (let key of keys1) {
    if (obj1[key] !== obj2[key]) return false;
  }

  return true;
};

const outToConsole = (...args) => process.stdout.write(args.join(' ') + '\n');

module.exports = {
  pathToPosix,
  resource,
  isFunction,
  shallowEqual,
  outToConsole,
};
