const path = require('path');
const { resolveException } = require('./exceptions');

const isFunction = (value) => typeof value === 'function';

/**
 * Converts the win path to POSIX standard.
 * The require() function understands only POSIX format.
 *
 * Fix path, for example:
 *   - `..\\some\\path\\file.js` to `../some/path/file.js`
 *   - `C:\\some\\path\\file.js` to `C:/some/path/file.js`
 *
 * @param {string} value The path on Windows.
 * @return {*}
 */
const pathToPosix = (value) => value.replace(/\\/g, '/');

const resource = {
  /**
   * @type {string} The context directory to require the file.
   */
  context: '',

  /**
   * @type {string} The the output public path is `webpack.options.output.publicPath`.
   */
  publicPath: '',

  /**
   * @type {{key: string}} The key is source file, the value is generated asset file.
   */
  files: {},

  /**
   * Require the resource file from source in pug template.
   *
   * @param {string} file The required file from source directory.
   * @returns {string} The output asset filename generated by filename template.
   * @throws {Error}
   */
  require: (file) => {
    const self = resource;
    const assetFile = self.files[file];

    if (assetFile) {
      // resolve web path of processed asset filename
      return path.posix.join(self.publicPath, assetFile);
    } else if (/\.js[a-z0-9]*$/i.test(file)) {
      // require only js code or json data
      const context = self.context || __dirname;
      const fullPath = require.resolve(file, { paths: [context] });
      // TODO remove in next version
      //const fullPath = path.isAbsolute(file) ? file : path.join(context, file);

      return require(fullPath);
    }

    resolveException(file);
  },
};

/**
 * Simple equal of two objects.
 *
 * @param {{}} obj1
 * @param {{}} obj2
 * @return {boolean}
 */
const shallowEqual = function (obj1, obj2) {
  const keys1 = Object.keys(obj1);
  const keys2 = Object.keys(obj2);

  if (keys1.length !== keys2.length) return false;

  for (let key of keys1) {
    if (obj1[key] !== obj2[key]) return false;
  }

  return true;
};

module.exports = {
  pathToPosix,
  resource,
  isFunction,
  shallowEqual,
};
