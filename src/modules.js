const { merge } = require('webpack-merge');
const { plugin } = require('./config');
const ansis = require('ansis');
const path = require('path');
const { outToConsole } = require('./utils');

/**
 * The lightweight plugin module to extract and save the HTML file.
 *
 * Note: you can use this module as boilerplate for your own custom module.
 *
 * @param {ModuleOptions} options The custom options.
 * @return {ModuleOptions} Default options merged with custom options.
 */
const extractHtml = function (options = {}) {
  const defaultOptions = {
    test: /\.(html)$/,
    enabled: true,
    verbose: false,
    sourcePath: undefined,
    outputPath: undefined,
    filename: '[name].html',
    // example of filename as the function
    //filename: (pathData, assetInfo) => {
    //  const name = pathData.chunk.name;
    //  return name === 'main' ? 'index.html' : '[name].html';
    //},

    /**
     * @param {string} content The extracted html.
     * @param {EntryAssetInfo} info
     * @param {Compilation} compilation
     * @return {string | null}
     */
    //postprocess: (content, info, compilation) => {
    //  // todo For example, pretty format the content of html.
    //  if (info.verbose) console.log(`Extract HTML: ${info.entryFile}\n`);
    //  return content;
    //},
  };

  return merge(defaultOptions, options);
};

/**
 * The plugin module to extract the css and source map from asset.
 * @note If the webpack.mode is `production` then `css-loader` minify the css self,
 *   if is `development` then css is pretty formatted.
 *
 * TODO test:
 *   - add supports a chunk name template with [id]
 *   - https://github.com/webpack-contrib/mini-css-extract-plugin/tree/master/test/manual/src
 *   - multiple entries, https://github.com/webpack-contrib/mini-css-extract-plugin/blob/master/test/cases/at-import-in-the-entry/webpack.config.js
 * TODO feature:
 *   - add option `chunkFilename` https://webpack.js.org/configuration/output/#outputchunkfilename
 *
 * @param {ModuleOptions} options The custom options.
 * @return {ModuleOptions} Default options merged with custom options.
 */
const extractCss = function (options = {}) {
  this.options = {
    test: /\.(css|sass|scss)$/,
    enabled: true,
    verbose: false,
    sourcePath: undefined,
    outputPath: undefined,
    filename: '[name].css',

    /**
     * @param {array} sourceMaps
     * @param {string} assetFile
     * @param {Compilation} compilation
     * @returns {string}
     * @private
     */
    extract: (sourceMaps, assetFile, compilation) => {
      // only one css module per css asset file, because the @import in CSS is not supported
      const [item] = sourceMaps;
      const [sourceFile, cssCode, media, cssMapping, supports, layer] = item;
      let sourceMappingURL = '',
        mapFile;

      if (cssMapping) {
        const RawSource = compilation.compiler.webpack.sources.RawSource;
        const sourceMapping = new RawSource(JSON.stringify(cssMapping));
        mapFile = assetFile + '.map';

        sourceMappingURL = `\n/*# sourceMappingURL=${path.basename(mapFile)} */`;
        compilation.emitAsset(mapFile, sourceMapping);
      }

      if (this.options.verbose) {
        let verbose =
          ansis.black.bgYellow(`[${plugin}]`) +
          ansis.black.bgGreen(` Extract CSS `) +
          ' from ' +
          ansis.cyan(sourceFile) +
          `\n` +
          ` - ${ansis.magenta(assetFile)}\n`;
        if (mapFile) verbose += ` - ${ansis.magenta(mapFile)}\n`;
        outToConsole(verbose);
      }

      return cssCode + sourceMappingURL;
    },

    /**
     * The post process for extracted CSS content.
     * This method can be overridden in module options.
     *
     * @param {string} content The css content generated by css-loader.
     * @param {EntryAssetInfo} info
     * @param {Compilation} compilation
     * @return {string | null}
     */
    postprocess: (content, info, compilation) => {
      // TODO user can handle here the pure CSS content
      return content;
    },
  };

  this.options = merge(this.options, options);

  return this.options;
};

module.exports = {
  extractHtml,
  extractCss,
};
